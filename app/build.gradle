plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
}

android {
    signingConfigs {
        release {
            storeFile file('imge.keystore')  //放在app目錄
            storePassword 'X^M#W8Qu:aQ9LD)>'
            keyAlias 'UsbDebugShortcut'
            keyPassword 'a6Xb%DNViy)N.j_B'
        }
    }

    namespace 'network.co.imge.usbdebugshortcut'
    compileSdk 35

    defaultConfig {
        applicationId "network.co.imge.usbdebugshortcut"
        minSdk 24
        targetSdk 35
        versionCode 2
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        compose true
    }
}

def createRenameTask(String taskName, String buildType, String extension) {
    tasks.register(taskName, Sync) {
        into { layout.buildDirectory.dir("outputs/apk/renamed").get().asFile }

        doFirst {
            def outputDir = layout.buildDirectory.dir("outputs/apk/renamed").get().asFile
            if (!outputDir.exists()) {
                outputDir.mkdirs()
            } else {
                outputDir.eachFile { file ->
                    if (file.isFile()) {
                        file.delete()
                    } else {
                        file.deleteDir()
                    }
                }
            }
        }

        def sourceDir = "build/outputs/apk/${buildType}"
        from(fileTree(dir: sourceDir, include: "**/*.${extension}")) {
            rename { String filename ->
                def versionName = android.defaultConfig.versionName
                def versionCode = android.defaultConfig.versionCode
                return "UsbDebugShortcut_${buildType}_${versionName}+${versionCode}.${extension}"
            }
        }
    }
}

// 建立 4 個任務：assemble/apk 與 bundle/aab
createRenameTask("renameAssembleDebugOutputs", "debug", "apk")
createRenameTask("renameAssembleReleaseOutputs", "release", "apk")
createRenameTask("renameBundleDebugOutputs", "debug", "aab")
createRenameTask("renameBundleReleaseOutputs", "release", "aab")

afterEvaluate {
    tasks.named("assembleDebug") {
        finalizedBy("renameAssembleDebugOutputs")
    }
    tasks.named("assembleRelease") {
        finalizedBy("renameAssembleReleaseOutputs")
    }
    tasks.named("bundleDebug") {
        finalizedBy("renameBundleDebugOutputs")
    }
    tasks.named("bundleRelease") {
        finalizedBy("renameBundleReleaseOutputs")
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest

    implementation(libs.androidx.lifecycle.viewmodel.compose)
}